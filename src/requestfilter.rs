use serde::Serialize;

#[derive(Debug, Clone, Serialize)]
pub struct RequestFilter {
    // FIXME: consider Option.
    pub search: String,
    pub order_by: String,
    pub order: String,
    pub offset: usize,
    pub limit: usize,
    pub bookmark: bool,
    pub borrowing: bool,
    pub cas_number: usize,
    pub cas_number_cmr: bool,
    pub category: usize,
    pub custom_name_part_of: String,
    pub empirical_formula: usize,
    pub entity: usize,
    pub hazard_statements: Vec<usize>,
    pub history: bool,
    pub storages: Vec<usize>,
    pub name: usize,
    pub permission: String,
    pub precautionary_statements: Vec<usize>,
    pub producer: usize,
    pub producer_ref: usize,
    pub product: usize,
    pub product_specificity: String,
    pub show_bio: bool,
    pub show_chem: bool,
    pub show_consu: bool,
    pub signal_word: usize,
    pub storage: usize,
    pub storage_archive: bool,
    pub storage_barecode: String,
    pub storage_batch_number: String,
    pub storage_to_destroy: bool,
    pub store_location: usize,
    pub store_location_can_store: bool,
    pub supplier: usize,
    pub symbols: Vec<usize>,
    pub tags: Vec<usize>,
    pub unit_type: String,
}

impl Default for RequestFilter {
    fn default() -> RequestFilter {
        RequestFilter {
            search: String::from("%%"),
            order_by: String::from(""),
            order: String::from("asc"),
            offset: 0,
            limit: usize::MAX,
            bookmark: false,
            borrowing: false,
            cas_number: 0,
            cas_number_cmr: false,
            category: 0,
            custom_name_part_of: String::from(""),
            empirical_formula: 0,
            entity: 0,
            hazard_statements: Vec::new(),
            history: false,
            storages: Vec::new(),
            name: 0,
            permission: String::from("r"),
            precautionary_statements: Vec::new(),
            producer: 0,
            producer_ref: 0,
            product: 0,
            product_specificity: String::from(""),
            show_bio: false,
            show_chem: false,
            show_consu: false,
            signal_word: 0,
            storage: 0,
            storage_archive: false,
            storage_barecode: String::from(""),
            storage_batch_number: String::from(""),
            storage_to_destroy: false,
            store_location: 0,
            store_location_can_store: false,
            supplier: 0,
            symbols: Vec::new(),
            tags: Vec::new(),
            unit_type: String::from(""),
        }
    }
}
